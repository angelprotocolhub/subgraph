// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AddedBeneficiary extends ethereum.Event {
  get params(): AddedBeneficiary__Params {
    return new AddedBeneficiary__Params(this);
  }
}

export class AddedBeneficiary__Params {
  _event: AddedBeneficiary;

  constructor(event: AddedBeneficiary) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get beneficiary(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Angel__AccountCreated extends ethereum.Event {
  get params(): Angel__AccountCreated__Params {
    return new Angel__AccountCreated__Params(this);
  }
}

export class Angel__AccountCreated__Params {
  _event: Angel__AccountCreated;

  constructor(event: Angel__AccountCreated) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get profileImage(): string {
    return this._event.parameters[1].value.toString();
  }
}

export class AssetClaimed extends ethereum.Event {
  get params(): AssetClaimed__Params {
    return new AssetClaimed__Params(this);
  }
}

export class AssetClaimed__Params {
  _event: AssetClaimed;

  constructor(event: AssetClaimed) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get senderUserName(): string {
    return this._event.parameters[1].value.toString();
  }

  get recipient(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get recipientUserName(): string {
    return this._event.parameters[3].value.toString();
  }

  get asset(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get status(): i32 {
    return this._event.parameters[6].value.toI32();
  }

  get txReference(): Bytes {
    return this._event.parameters[7].value.toBytes();
  }

  get claimTime(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }

  get txType(): boolean {
    return this._event.parameters[9].value.toBoolean();
  }
}

export class AssetReclaimed extends ethereum.Event {
  get params(): AssetReclaimed__Params {
    return new AssetReclaimed__Params(this);
  }
}

export class AssetReclaimed__Params {
  _event: AssetReclaimed;

  constructor(event: AssetReclaimed) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get senderUserName(): string {
    return this._event.parameters[1].value.toString();
  }

  get recipient(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get recipientUserName(): string {
    return this._event.parameters[3].value.toString();
  }

  get asset(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get status(): i32 {
    return this._event.parameters[6].value.toI32();
  }

  get txReference(): Bytes {
    return this._event.parameters[7].value.toBytes();
  }

  get reclaimTime(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }

  get txType(): boolean {
    return this._event.parameters[9].value.toBoolean();
  }
}

export class AssetSent extends ethereum.Event {
  get params(): AssetSent__Params {
    return new AssetSent__Params(this);
  }
}

export class AssetSent__Params {
  _event: AssetSent;

  constructor(event: AssetSent) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get senderUserName(): string {
    return this._event.parameters[1].value.toString();
  }

  get recipient(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get recipientUserName(): string {
    return this._event.parameters[3].value.toString();
  }

  get asset(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get narration(): string {
    return this._event.parameters[6].value.toString();
  }

  get status(): i32 {
    return this._event.parameters[7].value.toI32();
  }

  get txReference(): Bytes {
    return this._event.parameters[8].value.toBytes();
  }

  get time(): BigInt {
    return this._event.parameters[9].value.toBigInt();
  }

  get txType(): boolean {
    return this._event.parameters[10].value.toBoolean();
  }
}

export class Angel__checkUpkeepResult {
  value0: boolean;
  value1: Bytes;

  constructor(value0: boolean, value1: Bytes) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromBytes(this.value1));
    return map;
  }

  getUpkeepNeeded(): boolean {
    return this.value0;
  }

  getPerformData(): Bytes {
    return this.value1;
  }
}

export class Angel__getTransactionResultValue0Struct extends ethereum.Tuple {
  get sender(): Address {
    return this[0].toAddress();
  }

  get recipient(): Address {
    return this[1].toAddress();
  }

  get asset(): Address {
    return this[2].toAddress();
  }

  get amountOrTokenId(): BigInt {
    return this[3].toBigInt();
  }

  get narration(): string {
    return this[4].toString();
  }

  get status(): i32 {
    return this[5].toI32();
  }

  get time(): BigInt {
    return this[6].toBigInt();
  }

  get claimCode(): Bytes {
    return this[7].toBytes();
  }

  get endTime(): BigInt {
    return this[8].toBigInt();
  }

  get ref(): Bytes {
    return this[9].toBytes();
  }

  get txType(): boolean {
    return this[10].toBoolean();
  }

  get listId(): BigInt {
    return this[11].toBigInt();
  }
}

export class Angel__transactionListResult {
  value0: Address;
  value1: Address;
  value2: Address;
  value3: BigInt;
  value4: string;
  value5: i32;
  value6: BigInt;
  value7: Bytes;
  value8: BigInt;
  value9: Bytes;
  value10: boolean;
  value11: BigInt;

  constructor(
    value0: Address,
    value1: Address,
    value2: Address,
    value3: BigInt,
    value4: string,
    value5: i32,
    value6: BigInt,
    value7: Bytes,
    value8: BigInt,
    value9: Bytes,
    value10: boolean,
    value11: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
    this.value10 = value10;
    this.value11 = value11;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromString(this.value4));
    map.set(
      "value5",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value5))
    );
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromFixedBytes(this.value7));
    map.set("value8", ethereum.Value.fromUnsignedBigInt(this.value8));
    map.set("value9", ethereum.Value.fromFixedBytes(this.value9));
    map.set("value10", ethereum.Value.fromBoolean(this.value10));
    map.set("value11", ethereum.Value.fromUnsignedBigInt(this.value11));
    return map;
  }

  getSender(): Address {
    return this.value0;
  }

  getRecipient(): Address {
    return this.value1;
  }

  getAsset(): Address {
    return this.value2;
  }

  getAmountOrTokenId(): BigInt {
    return this.value3;
  }

  getNarration(): string {
    return this.value4;
  }

  getStatus(): i32 {
    return this.value5;
  }

  getTime(): BigInt {
    return this.value6;
  }

  getClaimCode(): Bytes {
    return this.value7;
  }

  getEndTime(): BigInt {
    return this.value8;
  }

  getRef(): Bytes {
    return this.value9;
  }

  getTxType(): boolean {
    return this.value10;
  }

  getListId(): BigInt {
    return this.value11;
  }
}

export class Angel__transactionsResult {
  value0: Address;
  value1: Address;
  value2: Address;
  value3: BigInt;
  value4: string;
  value5: i32;
  value6: BigInt;
  value7: Bytes;
  value8: BigInt;
  value9: Bytes;
  value10: boolean;
  value11: BigInt;

  constructor(
    value0: Address,
    value1: Address,
    value2: Address,
    value3: BigInt,
    value4: string,
    value5: i32,
    value6: BigInt,
    value7: Bytes,
    value8: BigInt,
    value9: Bytes,
    value10: boolean,
    value11: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
    this.value10 = value10;
    this.value11 = value11;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromString(this.value4));
    map.set(
      "value5",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value5))
    );
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromFixedBytes(this.value7));
    map.set("value8", ethereum.Value.fromUnsignedBigInt(this.value8));
    map.set("value9", ethereum.Value.fromFixedBytes(this.value9));
    map.set("value10", ethereum.Value.fromBoolean(this.value10));
    map.set("value11", ethereum.Value.fromUnsignedBigInt(this.value11));
    return map;
  }

  getSender(): Address {
    return this.value0;
  }

  getRecipient(): Address {
    return this.value1;
  }

  getAsset(): Address {
    return this.value2;
  }

  getAmountOrTokenId(): BigInt {
    return this.value3;
  }

  getNarration(): string {
    return this.value4;
  }

  getStatus(): i32 {
    return this.value5;
  }

  getTime(): BigInt {
    return this.value6;
  }

  getClaimCode(): Bytes {
    return this.value7;
  }

  getEndTime(): BigInt {
    return this.value8;
  }

  getRef(): Bytes {
    return this.value9;
  }

  getTxType(): boolean {
    return this.value10;
  }

  getListId(): BigInt {
    return this.value11;
  }
}

export class Angel extends ethereum.SmartContract {
  static bind(address: Address): Angel {
    return new Angel("Angel", address);
  }

  CHANNEL_ADDRESS(): Address {
    let result = super.call(
      "CHANNEL_ADDRESS",
      "CHANNEL_ADDRESS():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_CHANNEL_ADDRESS(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "CHANNEL_ADDRESS",
      "CHANNEL_ADDRESS():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  COMM_CONTRACT_ADDRESS(): Address {
    let result = super.call(
      "COMM_CONTRACT_ADDRESS",
      "COMM_CONTRACT_ADDRESS():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_COMM_CONTRACT_ADDRESS(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "COMM_CONTRACT_ADDRESS",
      "COMM_CONTRACT_ADDRESS():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  addressExists(param0: Address): boolean {
    let result = super.call("addressExists", "addressExists(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_addressExists(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "addressExists",
      "addressExists(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  beneficaries(param0: Address, param1: Address): boolean {
    let result = super.call(
      "beneficaries",
      "beneficaries(address,address):(bool)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return result[0].toBoolean();
  }

  try_beneficaries(
    param0: Address,
    param1: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "beneficaries",
      "beneficaries(address,address):(bool)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  checkUpkeep(param0: Bytes): Angel__checkUpkeepResult {
    let result = super.call("checkUpkeep", "checkUpkeep(bytes):(bool,bytes)", [
      ethereum.Value.fromBytes(param0)
    ]);

    return new Angel__checkUpkeepResult(
      result[0].toBoolean(),
      result[1].toBytes()
    );
  }

  try_checkUpkeep(
    param0: Bytes
  ): ethereum.CallResult<Angel__checkUpkeepResult> {
    let result = super.tryCall(
      "checkUpkeep",
      "checkUpkeep(bytes):(bool,bytes)",
      [ethereum.Value.fromBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Angel__checkUpkeepResult(value[0].toBoolean(), value[1].toBytes())
    );
  }

  generateTransactionReference(msgSender: Address, nonce: BigInt): Bytes {
    let result = super.call(
      "generateTransactionReference",
      "generateTransactionReference(address,uint256):(bytes32)",
      [
        ethereum.Value.fromAddress(msgSender),
        ethereum.Value.fromUnsignedBigInt(nonce)
      ]
    );

    return result[0].toBytes();
  }

  try_generateTransactionReference(
    msgSender: Address,
    nonce: BigInt
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "generateTransactionReference",
      "generateTransactionReference(address,uint256):(bytes32)",
      [
        ethereum.Value.fromAddress(msgSender),
        ethereum.Value.fromUnsignedBigInt(nonce)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getAddress(_userName: string): Address {
    let result = super.call("getAddress", "getAddress(string):(address)", [
      ethereum.Value.fromString(_userName)
    ]);

    return result[0].toAddress();
  }

  try_getAddress(_userName: string): ethereum.CallResult<Address> {
    let result = super.tryCall("getAddress", "getAddress(string):(address)", [
      ethereum.Value.fromString(_userName)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getTokenBalance(_user: Address, _asset: Address): BigInt {
    let result = super.call(
      "getTokenBalance",
      "getTokenBalance(address,address):(uint256)",
      [ethereum.Value.fromAddress(_user), ethereum.Value.fromAddress(_asset)]
    );

    return result[0].toBigInt();
  }

  try_getTokenBalance(
    _user: Address,
    _asset: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTokenBalance",
      "getTokenBalance(address,address):(uint256)",
      [ethereum.Value.fromAddress(_user), ethereum.Value.fromAddress(_asset)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTransaction(_txRef: Bytes): Angel__getTransactionResultValue0Struct {
    let result = super.call(
      "getTransaction",
      "getTransaction(bytes32):((address,address,address,uint256,string,uint8,uint256,bytes32,uint256,bytes32,bool,uint256))",
      [ethereum.Value.fromFixedBytes(_txRef)]
    );

    return changetype<Angel__getTransactionResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getTransaction(
    _txRef: Bytes
  ): ethereum.CallResult<Angel__getTransactionResultValue0Struct> {
    let result = super.tryCall(
      "getTransaction",
      "getTransaction(bytes32):((address,address,address,uint256,string,uint8,uint256,bytes32,uint256,bytes32,bool,uint256))",
      [ethereum.Value.fromFixedBytes(_txRef)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Angel__getTransactionResultValue0Struct>(value[0].toTuple())
    );
  }

  getUsername(_user: Address): string {
    let result = super.call("getUsername", "getUsername(address):(string)", [
      ethereum.Value.fromAddress(_user)
    ]);

    return result[0].toString();
  }

  try_getUsername(_user: Address): ethereum.CallResult<string> {
    let result = super.tryCall("getUsername", "getUsername(address):(string)", [
      ethereum.Value.fromAddress(_user)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  listCounter(): BigInt {
    let result = super.call("listCounter", "listCounter():(uint256)", []);

    return result[0].toBigInt();
  }

  try_listCounter(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("listCounter", "listCounter():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  profileImage(param0: Address): string {
    let result = super.call("profileImage", "profileImage(address):(string)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toString();
  }

  try_profileImage(param0: Address): ethereum.CallResult<string> {
    let result = super.tryCall(
      "profileImage",
      "profileImage(address):(string)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  profilePicture(param0: Address): string {
    let result = super.call(
      "profilePicture",
      "profilePicture(address):(string)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toString();
  }

  try_profilePicture(param0: Address): ethereum.CallResult<string> {
    let result = super.tryCall(
      "profilePicture",
      "profilePicture(address):(string)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  senderNonce(param0: Address): BigInt {
    let result = super.call("senderNonce", "senderNonce(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_senderNonce(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "senderNonce",
      "senderNonce(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transactionList(param0: BigInt): Angel__transactionListResult {
    let result = super.call(
      "transactionList",
      "transactionList(uint256):(address,address,address,uint256,string,uint8,uint256,bytes32,uint256,bytes32,bool,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Angel__transactionListResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toAddress(),
      result[3].toBigInt(),
      result[4].toString(),
      result[5].toI32(),
      result[6].toBigInt(),
      result[7].toBytes(),
      result[8].toBigInt(),
      result[9].toBytes(),
      result[10].toBoolean(),
      result[11].toBigInt()
    );
  }

  try_transactionList(
    param0: BigInt
  ): ethereum.CallResult<Angel__transactionListResult> {
    let result = super.tryCall(
      "transactionList",
      "transactionList(uint256):(address,address,address,uint256,string,uint8,uint256,bytes32,uint256,bytes32,bool,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Angel__transactionListResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toAddress(),
        value[3].toBigInt(),
        value[4].toString(),
        value[5].toI32(),
        value[6].toBigInt(),
        value[7].toBytes(),
        value[8].toBigInt(),
        value[9].toBytes(),
        value[10].toBoolean(),
        value[11].toBigInt()
      )
    );
  }

  transactions(param0: Bytes): Angel__transactionsResult {
    let result = super.call(
      "transactions",
      "transactions(bytes32):(address,address,address,uint256,string,uint8,uint256,bytes32,uint256,bytes32,bool,uint256)",
      [ethereum.Value.fromFixedBytes(param0)]
    );

    return new Angel__transactionsResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toAddress(),
      result[3].toBigInt(),
      result[4].toString(),
      result[5].toI32(),
      result[6].toBigInt(),
      result[7].toBytes(),
      result[8].toBigInt(),
      result[9].toBytes(),
      result[10].toBoolean(),
      result[11].toBigInt()
    );
  }

  try_transactions(
    param0: Bytes
  ): ethereum.CallResult<Angel__transactionsResult> {
    let result = super.tryCall(
      "transactions",
      "transactions(bytes32):(address,address,address,uint256,string,uint8,uint256,bytes32,uint256,bytes32,bool,uint256)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Angel__transactionsResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toAddress(),
        value[3].toBigInt(),
        value[4].toString(),
        value[5].toI32(),
        value[6].toBigInt(),
        value[7].toBytes(),
        value[8].toBigInt(),
        value[9].toBytes(),
        value[10].toBoolean(),
        value[11].toBigInt()
      )
    );
  }

  userName(param0: Address): string {
    let result = super.call("userName", "userName(address):(string)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toString();
  }

  try_userName(param0: Address): ethereum.CallResult<string> {
    let result = super.tryCall("userName", "userName(address):(string)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  userNameAddress(param0: string): Address {
    let result = super.call(
      "userNameAddress",
      "userNameAddress(string):(address)",
      [ethereum.Value.fromString(param0)]
    );

    return result[0].toAddress();
  }

  try_userNameAddress(param0: string): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "userNameAddress",
      "userNameAddress(string):(address)",
      [ethereum.Value.fromString(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  userNameExistence(param0: string): boolean {
    let result = super.call(
      "userNameExistence",
      "userNameExistence(string):(bool)",
      [ethereum.Value.fromString(param0)]
    );

    return result[0].toBoolean();
  }

  try_userNameExistence(param0: string): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "userNameExistence",
      "userNameExistence(string):(bool)",
      [ethereum.Value.fromString(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _commAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _channelAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddToBeneficiariesCall extends ethereum.Call {
  get inputs(): AddToBeneficiariesCall__Inputs {
    return new AddToBeneficiariesCall__Inputs(this);
  }

  get outputs(): AddToBeneficiariesCall__Outputs {
    return new AddToBeneficiariesCall__Outputs(this);
  }
}

export class AddToBeneficiariesCall__Inputs {
  _call: AddToBeneficiariesCall;

  constructor(call: AddToBeneficiariesCall) {
    this._call = call;
  }

  get _recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddToBeneficiariesCall__Outputs {
  _call: AddToBeneficiariesCall;

  constructor(call: AddToBeneficiariesCall) {
    this._call = call;
  }
}

export class ChangeProfilePictureCall extends ethereum.Call {
  get inputs(): ChangeProfilePictureCall__Inputs {
    return new ChangeProfilePictureCall__Inputs(this);
  }

  get outputs(): ChangeProfilePictureCall__Outputs {
    return new ChangeProfilePictureCall__Outputs(this);
  }
}

export class ChangeProfilePictureCall__Inputs {
  _call: ChangeProfilePictureCall;

  constructor(call: ChangeProfilePictureCall) {
    this._call = call;
  }

  get _imageURI(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class ChangeProfilePictureCall__Outputs {
  _call: ChangeProfilePictureCall;

  constructor(call: ChangeProfilePictureCall) {
    this._call = call;
  }
}

export class ClaimFundsCall extends ethereum.Call {
  get inputs(): ClaimFundsCall__Inputs {
    return new ClaimFundsCall__Inputs(this);
  }

  get outputs(): ClaimFundsCall__Outputs {
    return new ClaimFundsCall__Outputs(this);
  }
}

export class ClaimFundsCall__Inputs {
  _call: ClaimFundsCall;

  constructor(call: ClaimFundsCall) {
    this._call = call;
  }

  get _txRef(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _claimCode(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class ClaimFundsCall__Outputs {
  _call: ClaimFundsCall;

  constructor(call: ClaimFundsCall) {
    this._call = call;
  }
}

export class PerformUpkeepCall extends ethereum.Call {
  get inputs(): PerformUpkeepCall__Inputs {
    return new PerformUpkeepCall__Inputs(this);
  }

  get outputs(): PerformUpkeepCall__Outputs {
    return new PerformUpkeepCall__Outputs(this);
  }
}

export class PerformUpkeepCall__Inputs {
  _call: PerformUpkeepCall;

  constructor(call: PerformUpkeepCall) {
    this._call = call;
  }

  get performData(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class PerformUpkeepCall__Outputs {
  _call: PerformUpkeepCall;

  constructor(call: PerformUpkeepCall) {
    this._call = call;
  }
}

export class ReclaimFundsCall extends ethereum.Call {
  get inputs(): ReclaimFundsCall__Inputs {
    return new ReclaimFundsCall__Inputs(this);
  }

  get outputs(): ReclaimFundsCall__Outputs {
    return new ReclaimFundsCall__Outputs(this);
  }
}

export class ReclaimFundsCall__Inputs {
  _call: ReclaimFundsCall;

  constructor(call: ReclaimFundsCall) {
    this._call = call;
  }

  get _txRef(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class ReclaimFundsCall__Outputs {
  _call: ReclaimFundsCall;

  constructor(call: ReclaimFundsCall) {
    this._call = call;
  }
}

export class RegisterAngelAccountCall extends ethereum.Call {
  get inputs(): RegisterAngelAccountCall__Inputs {
    return new RegisterAngelAccountCall__Inputs(this);
  }

  get outputs(): RegisterAngelAccountCall__Outputs {
    return new RegisterAngelAccountCall__Outputs(this);
  }
}

export class RegisterAngelAccountCall__Inputs {
  _call: RegisterAngelAccountCall;

  constructor(call: RegisterAngelAccountCall) {
    this._call = call;
  }

  get _userName(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _profileImage(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class RegisterAngelAccountCall__Outputs {
  _call: RegisterAngelAccountCall;

  constructor(call: RegisterAngelAccountCall) {
    this._call = call;
  }
}

export class SendCryptoCall extends ethereum.Call {
  get inputs(): SendCryptoCall__Inputs {
    return new SendCryptoCall__Inputs(this);
  }

  get outputs(): SendCryptoCall__Outputs {
    return new SendCryptoCall__Outputs(this);
  }
}

export class SendCryptoCall__Inputs {
  _call: SendCryptoCall;

  constructor(call: SendCryptoCall) {
    this._call = call;
  }

  get _recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _asset(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _narration(): string {
    return this._call.inputValues[3].value.toString();
  }

  get _claimCode(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get _endTime(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class SendCryptoCall__Outputs {
  _call: SendCryptoCall;

  constructor(call: SendCryptoCall) {
    this._call = call;
  }
}

export class SendNFTCall extends ethereum.Call {
  get inputs(): SendNFTCall__Inputs {
    return new SendNFTCall__Inputs(this);
  }

  get outputs(): SendNFTCall__Outputs {
    return new SendNFTCall__Outputs(this);
  }
}

export class SendNFTCall__Inputs {
  _call: SendNFTCall;

  constructor(call: SendNFTCall) {
    this._call = call;
  }

  get _recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _contractAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _narration(): string {
    return this._call.inputValues[3].value.toString();
  }

  get _claimCode(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get _endTime(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class SendNFTCall__Outputs {
  _call: SendNFTCall;

  constructor(call: SendNFTCall) {
    this._call = call;
  }
}
